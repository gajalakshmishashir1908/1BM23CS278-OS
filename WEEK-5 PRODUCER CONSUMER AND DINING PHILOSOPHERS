PRODUCER CONSUMER USING SEMAPHORES:
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 2

int buffer[BUFFER_SIZE];
int in = 0, out = 0;

sem_t empty, full, mutex;

void* producer(void* arg) {
    int item, emptyValue;
    while (1) {
        printf("Enter a number to produce (or -1 to quit): ");
        scanf("%d", &item);

        if (item == -1) {
            printf("Producer exiting.\n");
            break;
        }

        sem_getvalue(&empty, &emptyValue);
        if (emptyValue == 0) {
            printf("Buffer full producer waiting...\n");
        }

        sem_wait(&empty); // Wait for empty slot
        sem_wait(&mutex); // Enter critical section

        buffer[in] = item;
        in = (in + 1) % BUFFER_SIZE;
        printf("Produced: %d\n", item);

        sem_post(&mutex); // Leave critical section
        sem_post(&full);  // Increment full count
    }
    return NULL;
}

void* consumer(void* arg) {
    int item, fullValue;
    while (1) {
        sem_getvalue(&full, &fullValue);
        if (fullValue == 0) {
            printf("Buffer empty consumer waiting...\n");
        }

        sem_wait(&full);  // Wait for item
        sem_wait(&mutex); // Enter critical section

        item = buffer[out];
        out = (out + 1) % BUFFER_SIZE;
        printf("\n");

        printf("Consumed: %d\n", item);

        sem_post(&mutex); // Leave critical section
        sem_post(&empty); // Increment empty count

        sleep(3); // Simulate time to process
    }
}

int main() {
    pthread_t prod, cons;

    sem_init(&empty, 0, BUFFER_SIZE); // BUFFER_SIZE empty slots
    sem_init(&full, 0, 0);            // 0 full slots
    sem_init(&mutex, 0, 1);           // Mutex binary semaphore

    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);

    pthread_join(prod, NULL);

    // Stop the consumer after producer exits
    pthread_cancel(cons);
    pthread_join(cons, NULL);

    sem_destroy(&empty);
    sem_destroy(&full);
    sem_destroy(&mutex);

    return 0;
}

OUTPUT:
Enter a number to produce (or -1 to quit): Buffer empty consumer waiting...
1
Produced: 1
Enter a number to produce (or -1 to quit):
Consumed: 1
2
Produced: 2
Enter a number to produce (or -1 to quit): 3
Produced: 3
Enter a number to produce (or -1 to quit): 4
Buffer full producer waiting...
Consumed: 2
Produced: 4
Enter a number to produce (or -1 to quit): 1
Buffer full producer waiting...
Consumed: 3
Produced: 1
Enter a number to produce (or -1 to quit):
Consumed: 4

DINING PHILOSOPHERS:
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
#include <time.h>

sem_t *forks;               // Array of fork semaphores
pthread_mutex_t mutex;      // Mutex to ensure mutual exclusion while eating
int num_philosophers;

void* philosopher(void* arg) {
    int id = *(int*)arg;
    free(arg);  // Free the dynamically allocated memory for the ID

    int left = id;
    int right = (id + 1) % num_philosophers;

    while (1) {
        printf("Philosopher %d is thinking...\n", id);
        sleep(rand() % 3 + 1); // Simulate thinking

        pthread_mutex_lock(&mutex);  // Ensure only one eats at a time

        // Pick up forks in a specific order to avoid deadlock
        if (left < right) {
            sem_wait(&forks[left]);
            sem_wait(&forks[right]);
        } else {
            sem_wait(&forks[right]);
            sem_wait(&forks[left]);
        }

        printf("Philosopher %d is eating...\n", id);
        sleep(rand() % 2 + 1); // Simulate eating

        // Release forks
        sem_post(&forks[left]);
        sem_post(&forks[right]);

        pthread_mutex_unlock(&mutex); // Allow others to eat

        printf("Philosopher %d finished eating and starts thinking again.\n", id);
    }

    return NULL;
}

int main() {
    srand(time(NULL));

    printf("Enter number of philosophers: ");
    scanf("%d", &num_philosophers);

    if (num_philosophers < 2) {
        printf("Need at least 2 philosophers to simulate.\n");
        return 1;
    }

    pthread_t *threads = malloc(sizeof(pthread_t) * num_philosophers);
    forks = malloc(sizeof(sem_t) * num_philosophers);

    // Initialize semaphores for forks
    for (int i = 0; i < num_philosophers; i++) {
        sem_init(&forks[i], 0, 1);
    }

    pthread_mutex_init(&mutex, NULL); // Initialize the mutex

    // Create philosopher threads
    for (int i = 0; i < num_philosophers; i++) {
        int* id = malloc(sizeof(int)); // Allocate memory for each philosopher's ID
        *id = i;
        pthread_create(&threads[i], NULL, philosopher, id);
    }

    // Join threads (will not return unless threads are terminated)
    for (int i = 0; i < num_philosophers; i++) {
        pthread_join(threads[i], NULL);
    }

    // Cleanup (won't be reached due to infinite loop in threads)
    for (int i = 0; i < num_philosophers; i++) {
        sem_destroy(&forks[i]);
    }
    pthread_mutex_destroy(&mutex);
    free(forks);
    free(threads);

    return 0;
}

OUTPUT:
Philosopher 0 is eating ...
Philosopher 0 finished eating and starts thinking again.
Philosopher 0 is thinking ...
Philosopher 1 is eating ...
Philosopher 1 finished eating and starts thinking again.
Philosopher 1 is thinking ...
Philosopher 0 is eating ...
Philosopher 0 finished eating and starts thinking again.
Philosopher 0 is thinking ...
Philosopher 1 is eating ...
Philosopher 1 finished eating and starts thinking again.
Philosopher 1 is thinking ...
Philosopher 0 is eating ...
Philosopher 0 finished eating and starts thinking again.
Philosopher 0 is thinking ...
Philosopher 1 is eating ...
Philosopher 0 is eating ...
Philosopher 1 finished eating and starts thinking again.
Philosopher 1 is thinking ...

Enter number of philosophers: 2
Philosopher 1 is thinking ...
Philosopher 0 is thinking ...
