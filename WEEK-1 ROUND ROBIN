ROUND ROBIN
#include <stdio.h>

#define MAX 100

void roundRobin(int n, int at[], int bt[], int quant) {
    int ct[n], tat[n], wt[n], rem_bt[n];
    int queue[MAX], front = 0, rear = 0;
    int time = 0, completed = 0, visited[n];

    // Initialize the remaining burst times and visited processes
    for (int i = 0; i < n; i++) {
        rem_bt[i] = bt[i];
        visited[i] = 0;
    }

    // Start with the first process (assuming processes are 0-indexed)
    queue[rear++] = 2;  // The process with arrival time 0 should be first
    visited[2] = 1;

    while (completed < n) {
        int index = queue[front++];

        // Process the current task based on time quantum
        if (rem_bt[index] > quant) {
            time += quant;
            rem_bt[index] -= quant;
        } else {
            time += rem_bt[index];
            rem_bt[index] = 0;
            ct[index] = time;
            completed++;
        }

        // Add processes that have arrived by the current time and are not yet visited
        for (int i = 0; i < n; i++) {
            if (at[i] <= time && rem_bt[i] > 0 && !visited[i]) {
                queue[rear++] = i;
                visited[i] = 1;
            }
        }

        // If the current process still has remaining burst time, put it back in the queue
        if (rem_bt[index] > 0) {
            queue[rear++] = index;
        }

        // If the queue is empty, look for the next process that has not yet started
        if (front == rear) {
            for (int i = 0; i < n; i++) {
                if (rem_bt[i] > 0) {
                    queue[rear++] = i;
                    visited[i] = 1;
                    break;
                }
            }
        }
    }

    // Calculate turnaround time (TAT) and waiting time (WT)
    float total_tat = 0, total_wt = 0;
    printf("P#\tAT\tBT\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        tat[i] = ct[i] - at[i];
        wt[i] = tat[i] - bt[i];
        total_tat += tat[i];
        total_wt += wt[i];
        printf("%d\t%d\t%d\t%d\t%d\t%d\n", i + 1, at[i], bt[i], ct[i], tat[i], wt[i]);
    }

    printf("Average TAT: %.2f\n", total_tat / n);
    printf("Average WT: %.2f\n", total_wt / n);
}

int main() {
    int n, quant;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    int at[n], bt[n];
    for (int i = 0; i < n; i++) {
        printf("Enter AT and BT for process %d: ", i + 1);
        scanf("%d %d", &at[i], &bt[i]);
    }

    printf("Enter time quantum: ");
    scanf("%d", &quant);

    roundRobin(n, at, bt, quant);
    return 0;
}
OUTPUT:
CASE:1 PROCESS P1 STARTS FROM 0 
Enter number of processes: 5
Enter AT and BT for process 1: 0 5
Enter AT and BT for process 2: 1 6
Enter AT and BT for process 3: 2 3
Enter AT and BT for process 4: 3
1
Enter AT and BT for process 5: 4 5
Enter time quantum: 4
P#      AT      BT      CT      TAT     WT
1       0       5       17      17      12
2       1       6       19      18      12
3       2       3       11      9       6
4       3       1       12      9       8
5       4       5       20      16      11
Average TAT: 13.80
Average WT: 9.80

Process returned 0 (0x0)   execution time : 74.140 s
Press any key to continue.


CASE:2 PROCESS P1 STARTS FROM A DIFFERENT NUMBER:
Enter number of processes: 4
Enter AT and BT for process 1: 2 10
Enter AT and BT for process 2: 4 6
Enter AT and BT for process 3: 0 8
Enter AT and BT for process 4: 6 4
Enter time quantum: 4
P#      AT      BT      CT      TAT     WT
1       2       10      28      26      16
2       4       6       26      22      16
3       0       8       16      16      8
4       6       4       20      14      10
Average TAT: 19.50
Average WT: 12.50

Process returned 0 (0x0)   execution time : 16.938 s
Press any key to continue.
